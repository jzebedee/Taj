using System;
using System.Collections.Generic;
using System.Text;

namespace Palace
{
    public static class PalaceEncryption
    {
        private static readonly byte[] Seeded = new byte[] {55,197,96,114,205,165,11,6,209,249,203,60,87,12,13,27,121,30,45,114,180,4,179,96,178,128,221,137,160,237,242,132,124,250,196,153,159,39,237,222,108,222,30,184,72,52,100,41,118,165,1,134,33,11,191,176,153,237,32,45,117,66,76,106,192,117,126,137,51,0,101,130,3,4,147,61,87,74,170,47,165,213,116,189,215,49,218,131,150,226,24,89,238,32,83,36,61,136,171,119,74,153,185,4,225,211,157,208,137,191,137,68,50,100,199,46,147,51,213,107,41,149,187,59,130,150,61,96,38,208,132,91,69,90,139,76,90,60,91,138,88,148,184,155,19,219,107,190,26,10,96,115,116,85,231,89,176,186,68,118,172,226,133,22,196,16,83,151,56,192,238,168,6,66,169,27,189,210,151,226,221,37,218,165,68,199,32,81,58,251,146,148,23,113,47,2,85,96,150,181,38,76,87,247,139,70,120,25,226,182,96,143,208,247,148,105,4,45,197,65,210,64,131,137,103,199,238,245,93,167,137,49,215,146,82,87,216,167,16,246,211,20,138,18,118,127,26,226,23,213,177,255,126,130,216,50,179,137,29,178,68,106,120,175,15,35,249,100,122,59,122,19,33,80,134,128,7,71,152,188,132,36,110,224,171,132,222,220,1,32,237,3,2,153,163,47,158,137,103,3,105,197,165,46,18,177,84,95,211,54,249,128,220,55,95,35,105,178,203,57,153,123,233,89,99,40,9,5,182,146,170,69,121,84,212,227,45,107,108,90,167,41,231,108,102,149,64,201,45,206,51,57,85,102,202,126,209,122,192,32,64,9,78,41,179,222,9,205,153,174,251,24,173,115,213,126,186,2,91,143,92,163,249,169,43,242,99,222,152,47,38,153,40,202,190,239,119,114,174,200,93,41,114,108,42,24,59,139,161,21,172,30,93,9,72,125,221,44,171,138,7,228,74,164,107,150,17,136,205,156,48,21,207,85,18,241,130,76,4,36,236,168,174,210,28,46,28,18,66,154,232,32,100,92,191,222,232,244,229,76,119,228,81,176,38,218,167,134,243,16,180,134,232,14,121,145,78,222,117,123,213,209,215,170,22,189,91,3,165,49,56,147,51,102,242,14,111,16,168,216,53,149,80,45,161,63,253,6,9,144,134,204};

        //static Lazy<short[]> seeded = new Lazy<short[]>(() =>
        //{
        //    int seed = 0xa2c2a;
        //    var lut = new short[512];

        //    for (int i = 0; i < 512; i++)
        //    {
        //        int a = 16807 * (seed % 0x1f31d) - 2836 * (seed / 0x1f31d);
        //        lut[i] = (short)((seed = a > 0 ? a : a + 0x7fffffff) / 2147483647d * 256d);
        //    }

        //    return lut;
        //});

        public static byte[] Encrypt(string message, bool utf8Output = false, int byteLimit = 254)
        {
            byte[] ba =
                (utf8Output ? Encoding.GetEncoding("UTF-8") : Encoding.GetEncoding("Windows-1252")).GetBytes(message);
            if (ba.Length > byteLimit)
                Array.Resize(ref ba, byteLimit);

            var bs = new byte[ba.Length];
            byte lastChar = 0;

            int rc = 0;
            for (int i = ba.Length - 1; i >= 0; i--)
            {
                bs[i] = (byte) (ba[i] ^ Seeded[rc++] ^ lastChar);
                lastChar = (byte) (bs[i] ^ Seeded[rc++]);
            }

            return bs;
        }

        public static string Decrypt(byte[] bytesIn, bool utf8Input = false)
        {
            var bs = new byte[bytesIn.Length];
            byte lastChar = 0;

            int rc = 0;
            for (int i = bs.Length - 1; i >= 0; i--)
            {
                bs[i] = (byte) (bytesIn[i] ^ Seeded[rc++] ^ lastChar);
                lastChar = (byte) (bytesIn[i] ^ Seeded[rc++]);
            }

            return (utf8Input ? Encoding.GetEncoding("UTF-8") : Encoding.GetEncoding("Windows-1252")).GetString(bs);
        }
    }
}